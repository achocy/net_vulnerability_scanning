from flask import Flask, request, jsonify, send_from_directory
import openvas
import json

app = Flask(__name__)


# gmp = None


@app.route('/')
def hello_world():
    return 'Hello World!'


@app.route('/createTarget', methods=['POST'])
def createtarget():
    gmp = openvas.create_connection()
    # target_id = ov.create_target(gmp, ov.hosts, ov.target_name, ov.target_comment)
    jsonReq = request.get_json(force=True)
    target_name = jsonReq["name"]
    hosts = jsonReq["hosts"]
    print(hosts)
    target_comment = jsonReq.get("comment", "")
    port_list = jsonReq.get("port_list", None)
    alive_tests = jsonReq.get("alive_tests", None)
    target_id = openvas.create_target(gmp, hosts, target_name, target_comment, port_list, alive_tests)
    # return target_id
    return target_id


@app.route('/getTaskStatus', methods=['POST'])
def gettaskstatus():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    task_id = jsonReq.get('task_id')
    try:
        status, progress = openvas.get_task_status(gmp, task_id)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return jsonify({"status": status, "progress": progress}), 200


@app.route('/getReportByTask', methods=['POST'])
def getreportbytask():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    task_id = jsonReq.get('task_id')
    try:
        report = openvas.getReportByTask(gmp, task_id)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return jsonify({"report": report}), 200


## target_id = 128732cc-dd3c-4913-9f4a-85e432541247

@app.route('/getAllTargets')
def getalltargets():
    gmp = openvas.create_connection()
    all_targets = openvas.get_all_targets(gmp)
    jsonRes = json.dumps(all_targets, ensure_ascii=False)
    return jsonRes


@app.route('/createTask', methods=['POST'])
def createtask():
    gmp = openvas.create_connection()
    # target_id = ov.create_target(gmp, ov.hosts, ov.target_name, ov.target_comment)
    jsonReq = request.get_json(force=True)
    # default scanner id
    scanner_id = jsonReq.get('scanner_id', '08b69003-5fc2-4037-a479-93b440211c73')  # default if scanner not specified
    config_id = jsonReq.get('config_id', 'daba56c8-73ec-11df-a475-002264764cea')
    task_comment = jsonReq.get('task_comment', "")

    task_id = openvas.create_task(gmp, jsonReq['name'], jsonReq['id'], scanner_id, config_id,
                                  task_comment)
    return task_id


@app.route('/startTask', methods=['POST'])
def starttask():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    task_id = jsonReq.get('task_id')
    try:
        openvas.start_task(gmp, task_id)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return "Task started"


@app.route('/getAllTasks')
def getalltasks():
    gmp = openvas.create_connection()
    all_tasks = openvas.get_all_tasks(gmp)
    jsonRes = json.dumps(all_tasks, ensure_ascii=False)
    return jsonRes


@app.route('/deleteTask', methods=['POST'])
def deletetask():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    task_id = jsonReq.get('id')
    try:
        openvas.delete_task(gmp, task_id)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return 'Task deleted successfully'


@app.route('/deleteTarget', methods=['POST'])
def deletetarget():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    target_id = jsonReq.get('id')
    try:
        openvas.delete_target(gmp, target_id)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return 'Target deleted successfully'


@app.route('/editTarget', methods=['POST'])
def edittarget():
    gmp = openvas.create_connection()
    # target_id = ov.create_target(gmp, ov.hosts, ov.target_name, ov.target_comment)
    jsonReq = request.get_json(force=True)
    ctarget_id = jsonReq.get('target_id')
    target_hosts, target_name, target_comment, target_port_list, target_alive_tests = openvas.get_target(gmp,
                                                                                                         ctarget_id)
    ctarget_name = jsonReq.get('target_name', target_name)
    ctarget_comment = jsonReq.get('target_comment', target_comment)
    ctarget_hosts = jsonReq.get('target_hosts', target_hosts)
    ctarget_port_list = jsonReq.get('port_list', target_port_list)
    ctarget_alive_tests = jsonReq.get('alive_tests', target_alive_tests)

    try:
        openvas.edit_target(gmp, ctarget_hosts, ctarget_name, ctarget_comment, ctarget_port_list, ctarget_alive_tests)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return 'Target has been edited succesfully'


@app.route('/editTask', methods=['POST'])
def edittask():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    ctask_id = jsonReq.get('task_id')
    task_name, task_target_id, task_scanner_id, task_config_id, task_comment = openvas.get_task(gmp, ctask_id)
    ctask_name = jsonReq.get('task_name', task_name)
    ctask_target_id = jsonReq.get('target_id', task_target_id)
    ctask_scanner_id = jsonReq.get('scanner_id', task_scanner_id)
    ctask_config_id = jsonReq.get('config_id', task_config_id)
    ctask_comment = jsonReq.get('comment', task_comment)

    try:
        openvas.edit_task(gmp, ctask_id, ctask_name, ctask_target_id, ctask_scanner_id, ctask_config_id, ctask_comment)
    except (ValueError, KeyError, TypeError) as error:
        return error
    return 'Task has been edited succesfully'


@app.route('/getTarget', methods=['POST'])
def gettarget():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    ctarget_id = jsonReq.get('id')
    target = {}

    target_hosts, target_name, target_comment, target_port_list, target_alive_tests = openvas.get_target(gmp,
                                                                                                         ctarget_id)
    ctarget_name = jsonReq.get('target_name', target_name)
    ctarget_comment = jsonReq.get('target_comment', target_comment)
    ctarget_hosts = jsonReq.get('target_hosts', target_hosts)
    ctarget_port_list = jsonReq.get('port_list', target_port_list)
    ctarget_alive_tests = jsonReq.get('alive_tests', target_alive_tests)

    target['target_name'] = ctarget_name
    target['target_comment'] = ctarget_comment
    target['hosts'] = ctarget_hosts
    target['port_list'] = ctarget_port_list
    target['alive_tests'] = ctarget_alive_tests

    jsonRes = json.dumps(target, ensure_ascii=False)
    return jsonRes


@app.route('/getTask', methods=['POST'])
def gettask():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    ctask_id = jsonReq.get('id')
    task = {}
    task_name, task_target_id, task_scanner_id, task_config_id, task_comment = openvas.get_task(gmp, ctask_id)
    ctask_name = jsonReq.get('task_name', task_name)
    ctask_target_id = jsonReq.get('target_id', task_target_id)
    ctask_scanner_id = jsonReq.get('scanner_id', task_scanner_id)
    ctask_config_id = jsonReq.get('config_id', task_config_id)
    ctask_comment = jsonReq.get('comment', task_comment)

    task['task_name'] = ctask_name
    task['target_id'] = ctask_target_id
    task['scanner_id'] = ctask_scanner_id
    task['config_id'] = ctask_config_id
    task['comment'] = ctask_comment

    jsonRes = json.dumps(task, ensure_ascii=False)
    return jsonRes


@app.route('/getAllReports', methods=['GET'])
def getallreports():
    gmp = openvas.create_connection()
    all_reports = openvas.get_all_reports(gmp)
    jsonRes = json.dumps(all_reports, ensure_ascii=False)
    return jsonRes


@app.route('/getReport', methods=['POST'])
def getreport():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    report_id = jsonReq['id']
    report_format_id = jsonReq.get('format_id', 'c402cc3e-b531-11e1-9163-406186ea4fc5')
    
    try:
        filename = openvas.get_report_pdf(gmp, report_id, report_format_id)
    except (ValueError, KeyError, TypeError) as error:
        return error
    
    print(filename)

    return send_from_directory('/home/csirt-admin/vulnerability-analysis/reports', filename, as_attachment=True)


@app.route('/completeFlow', methods=['POST'])
def completeflow():
    gmp = openvas.create_connection()
    jsonReq = request.get_json(force=True)
    request_id = jsonReq['request_id']
    target_name = jsonReq['target_name']
    hosts = jsonReq["hosts"]
    significance = jsonReq["significance"]

    try:
        print("starting openvas")
        openvas.completeFlow(gmp, request_id, target_name, hosts, significance)
        print("completed openvas")

    except (ValueError, KeyError, TypeError) as error:
        return error
    
    return "Flow completed successfully"

if __name__ == '__main__':
    # gmp = openvas.create_connection()
    app.run(host='0.0.0.0', port=5000)
