"""
.. module:: openvas
   :synopsis: All functions to scan a host or hosts and get the classified vulnerabilities using OpenVAS API
.. moduleauthor:: Andreas Charalampous
"""
import time

from gvm.protocols.gmpv7 import Gmp
from gvm.transforms import EtreeTransform
from gvm.connections import UnixSocketConnection
from gvm.protocols.latest import Osp
from gvm.xml import pretty_print
import lxml
import xml.etree.ElementTree as ET
import base64, os
import mysql.connector
import datetime
import subprocess
# Creates a connection to the openVas instance

import pandas as pd
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import os


def create_connection():
    """
           **Creates the connection*
           This function allows user to create a connection with openvas manager using gvm. The UnixSocketConnection function
           takes as a parameter a path that leads to openvasmd socket file (/var/run/openvasmd.sock) that exists in the VM that runs OpenVAS manager.
           Read rights must be granted (sudo chmod a+rwx openvasmd.sock)

           :return: The connection that gives access to the OpenVAS interface.
       """

    subprocess.call(["sudo", "./config.sh"])    
    connection = UnixSocketConnection(path='/var/run/gvmd.sock')
    # transform = EtreeTransform()
    gmp = Gmp(connection)

    # version = gmp.get_version()
    gmp.authenticate('admin', 'admin')
    
    return gmp


# scanner= gmp.create_scanner(name='Default OpenVas', host='127.0.0.1', scanner_type='1')

# Creates a target host(s)

def create_target(gmp, hosts, target_name, target_comment="", port_list=None):
    """
       Creates a target that needs to be scanned


        Examples
        -----
        curl -d '{"name":"Target_name_value", "hosts:["IP1","IP2","subnet1"]}' -H "Content-Type: application/json" -X POST http://localhost:5000/createTarget


       Parameters
       ----------
            gmp
                The connection created by create_connection()

            hosts
                A list that contain a host, a subnet or multiple hosts

            target_name
                A target name must be given

            target_comment
                A target comment (notes, details etc) OPTIONAL

       :return: The target id of the newly created target

       """

    target = gmp.create_target(name=target_name, hosts=hosts, comment=target_comment, port_list_id=port_list)
    pretty_print(target)
    tree = ET.fromstring(target)
    target_id = (tree.attrib['id'])
    print(target_id)
    return target_id


def get_all_targets(gmp):
    """
                Retrieves all previously created targets that can be used to create tasks (the targets pool)

                Examples
                -------
                curl -X GET 'http://localhost:5000/getAllTargets'


                Parameters
                ----------
                    gmp
                        The connection created by create_connection()

                :return: All the created targets

    """

    all_targets = {}
    targets_list = []
    temp_target = {}
    targets = gmp.get_targets()
    tree = ET.fromstring(targets)

    pretty_print(all_targets)

    for name in tree.findall('target'):
        target_name = name.find('name').text
        # print(target_name)
        target_id = name.attrib['id']

        temp_target['name'] = target_name
        temp_target['id'] = target_id

        # print(temp_target)

        targets_list.append(temp_target)
        temp_target = {}
        # print(targets_list)
    all_targets['targets'] = targets_list

    return all_targets


# Creates a task

def create_task(gmp, task_name, target_id, scanner_id="08b69003-5fc2-4037-a479-93b440211c73",
                config_id="daba56c8-73ec-11df-a475-002264764cea", task_comment=""):
    """
        Creates a scanning task for a target or targets (depending on how many hosts the target contains)


        Examples
        -----
        curl -d '{"name":"Task name", "id":"target_id_value"}' -H "Content-Type: application/json" -X POST http://localhost:5000/createTask




        Parameters
        ----------
            gmp
              The connection created by create_connection()

            task_name
               A task name must be given

            task_comment
               A task comment may be given (notes, details etc) OPTIONAL

            target_id
               The target_id from the targets pool

            scanned_id
                The type of scanner. OpenVAS scanner is the default OPTIONAL

            config_id
                The scan's configuration file OPTIONAL

        :return: The task id of the newly created task

          """

    task = gmp.create_task(name=task_name, comment=task_comment, target_id=target_id,
                           scanner_id=scanner_id,
                           config_id=config_id)

    pretty_print(task)
    tree = ET.fromstring(task)
    task_id = (tree.attrib['id'])
    return task_id


# Starts a specific task

def start_task(gmp, task_id):
    """
        Starts a previously created task

        Examples
                -------
                curl -X GET 'http://localhost:5000/startTask'

        Parameters
        ----------
              gmp
                 The connection created by create_connection().

              task_id
                 The task id from the tasks pool.

        :return: none

             """
    gmp.start_task(task_id)


# Get all tasks that are registered in OpenVas manager. Returns a dictionary with key=Task ID, Value=Task name

def get_all_tasks(gmp):
    """
            Retrieves all previously created tasks (the tasks pool)

            Examples
                -------
                curl -X GET 'http://localhost:5000/getAllTasks'

            Parameters
            ----------
                gmp
                    The connection created by create_connection()

            :return: All the created tasks

             """

    tasks = gmp.get_tasks()
    tree = ET.fromstring(tasks)
    # task_id = (tree.attrib['id'])

    # for child in tree:
    #     print(child.tag, child.attrib)

    all_tasks = {}
    task = []
    temp_task = {}
    tasks_list = []

    for name in tree.findall('task'):
        task_name = name.find('name').text
        task_id = name.attrib['id']
        task.append(task_id)

        temp_task['name'] = task_name
        temp_task['id'] = task_id

        tasks_list.append(temp_task)
        temp_task = {}
    all_tasks['tasks'] = tasks_list

    return all_tasks

    # print(all_tasks)


# Deletes a specific task

def delete_task(gmp, task_id):
    """
        Deletes a specific task

        Examples
        -------
        curl -X GET 'http://localhost:5000/deleteTask'


        Parameters
        ----------
            gmp
                The connection created by create_connection()

            task_id
                The task id from the tasks pool.


        :return: none

     """

    gmp.delete_task(task_id)


def edit_target(gmp, target_id, hosts, target_name, target_comment="", port_list=None):
    """
            Edit a specific target given the id

            Examples
            -----
            curl -d '{"target_id":"Target_id", "hosts":"hosts", "target_name":"target_name", "comment":"target_comment" ....}' -H "Content-Type: application/json" -X POST http://localhost:5000/editTarget

            Parameters
            ----------
                gmp
                    The connection created by create_connection()


                hosts
                    A list that contain a host, a subnet or multiple hosts OPTIONAL

                target_name
                    A target name OPTIONAL

                target_comment
                    A target comment (notes, details etc) OPTIONAL

                port_list
                    Port lists standards (More details at the end of the document)

                alive_test
                    Host probing modules


            :return: none

         """

    gmp.modify_target(target_id=target_id, name=target_name, hosts=hosts, comment=target_comment,
                      port_list_id=port_list)


def edit_task(gmp, task_id, task_name, target_id, scanner_id="08b69003-5fc2-4037-a479-93b440211c73",
              config_id="daba56c8-73ec-11df-a475-002264764cea", task_comment=""):
    """
                Edit a specific task given the id

                Examples
                -----
                curl -d '{"id":"task_id","task_name":"task_name", "comment":"target_comment" ,"scanner_id":"scanner_id", "config_id":"config_id",}' -H "Content-Type: application/json" -X POST http://localhost:5000/editTask

                Parameters
                ----------
                    gmp
                        The connection created by create_connection()



                    task_id
                    The task id to be edited

                    task_name
                        A task name OPTIONAL

                    target_comment
                        A task comment (notes, details etc) OPTIONAL

                    scanned_id
                        The type of scanner. OpenVAS scanner is the default OPTIONAL

                    config_id
                        The scan's configuration file OPTIONAL


                :return: none

             """

    gmp.modify_task(task_id=task_id, name=task_name, comment=task_comment, target_id=target_id,
                    scanner_id=scanner_id, config_id=config_id)


def get_all_reports(gmp):
    """
            Retrieves all executed tasks' report ids and names

            curl -X GET 'http://localhost:5000/getAllReports'

            Parameters
            ----------
                gmp
                    The connection created by create_connection()

            :return: a dictionary with key value pairs. Key=Report_id, Value=Report_name

    """

    reports = {}
    temp_report = {}
    report_list = []
    report_name = ''
    # print('working')
    reps = gmp.get_reports(filter='', note_details=False, override_details=False)

    tree = ET.fromstring(reps)
    for name in tree.findall('report'):
        report_id = name.attrib['id']
        for name2 in name.findall('task'):
            report_name = name2.find('name').text

        temp_report['name'] = report_name
        temp_report['id'] = report_id

        report_list.append(temp_report)
        temp_report = {}

    reports['reports'] = report_list
    # pretty_print(reps)
    return reports


# Retrieve a report given the report_id and the report_format_id

def get_report_pdf(gmp, report_id, report_format_id="c402cc3e-b531-11e1-9163-406186ea4fc5"):
    """
            Retrieve a report given the report_id and the report_format_id and creates a pdf(default) file with the results

            Examples
            -----
            curl -d '{"id":"report_id","format_id":"report_format_id"}' -H "Content-Type: application/json" -X POST http://localhost:5000/getReport


            Parameters
            ----------
                gmp
                    The connection created by create_connection()

                report_id
                    The report id from the reports pool retrieved by get_all_reports().

                report_format_id
                    The report's format. Default is PDF
            :return: none

    """

    report = gmp.get_report(report_id=report_id, report_format_id=report_format_id)
    tree = ET.fromstring(report)

    # for name in tree.findall('report/task/name'):
    #     # task_name = name.find('report').text
    #     print(name.text)
    pdf_name = tree.find('report/task/name').text
    pdf_code = tree.find('report/report_format').tail
   
    pdf_name.replace(' ', '_')
    pdf_name.replace('/', '_')
    pdf_name += '.pdf'
    # print(pdf_name)

    with open('reports/' + pdf_name, 'wb') as fout:
        fout.write(base64.b64decode(pdf_code))

    return pdf_name


def delete_target(gmp, target_id):
    """
                Deletes a specific target

                Examples
                -----
                curl -d '{"id":"target_id"}' -H "Content-Type: application/json" -X POST http://localhost:5000/deleteTarget


                Parameters
                ----------
                    gmp
                        The connection created by create_connection()

                    target_id
                        Target id to delete

                :return: none

        """

    gmp.delete_target(target_id, ultimate=False)


def get_target(gmp, target_id):
    """
                Retrieve a target from the target pools

                Examples
                -----
                curl -d '{"id":"target_id"}' -H "Content-Type: application/json" -X POST http://localhost:5000/getTarget


                Parameters
                ----------
                    gmp
                        The connection created by create_connection()

                    target_id
                        The target's id to retrieve

                :return: the target

        """
    target = gmp.get_target(target_id)

    tree = ET.fromstring(target)
    # for name in tree.find('target'):

    target_name = tree.find('target/name').text
    target_hosts = tree.find('target/hosts').text
    target_comment = tree.find('target/comment').text
    target_port_list = tree.find('target/port_list').attrib['id']


    # print(target_name, target_hosts, target_comment, target_port_list, target_alive_tests)
    return target_hosts, target_name, target_comment, target_port_list
    # return target


def get_task(gmp, task_id):
    """
                Retrieve a task from the tasks pool

                Examples
                -----
                curl -d '{"id":"task_id"}' -H "Content-Type: application/json" -X POST http://localhost:5000/getTask


                Parameters
                ----------
                    gmp
                        The connection created by create_connection()

                    task_id
                        The task's id to retrieve

                :return: the task

        """
    task = gmp.get_task(task_id)
    tree = ET.fromstring(task)
    pretty_print(task)
    task_name = tree.find('task/name').text
    task_target_id = tree.find('task/target').attrib['id']
    task_scanner_id = tree.find('task/scanner').attrib['id']
    task_config_id = tree.find('task/config').attrib['id']
    task_comment = tree.find('task/comment').text

    return task_name, task_target_id, task_scanner_id, task_config_id, task_comment


def getReportByTask(gmp, task_id):
    task = gmp.get_task(task_id)
    # pretty_print(task)
    tree = ET.fromstring(task)

    # task_status = tree.find('task/status').text
    # task_progress = tree.find('task/progress').text
    task_report = tree.find('task/last_report/report').attrib['id']
    # print(report_id)
    return task_report


def hostsFromFile(filename):
    with open(filename, 'r') as file:
        temp_hosts = file.readlines()
        temp_hosts = [str(host.strip('\n')) for host in temp_hosts]
        hosts = temp_hosts[0].replace(' ', '').split(',')

    return hosts


def createSchedule(gmp, scheduleName, scheduleComment, period, duration):
    t = gmp.create_schedule(name=scheduleName, comment=scheduleComment, first_time_day_of_month="1",
                            first_time_hour="0", first_time_minute="0", first_time_month="1", first_time_year="2019",
                            period=period, period_unit="day", duration=duration, duration_unit="hour")
    pretty_print(t)


def getAllSchedules(gmp):
    schedules = gmp.get_schedules()

    tree = ET.fromstring(schedules)
    # task_id = (tree.attrib['id'])

    # for child in tree:
    #     print(child.tag, child.attrib)

    all_schedules = {}
    schedule = []
    temp_schedule = {}
    schedules_list = []

    for name in tree.findall('schedule'):
        schedule_name = name.find('name').text
        schedule_id = name.attrib['id']
        schedule.append(schedule_id)

        temp_schedule['name'] = schedule_name
        temp_schedule['id'] = schedule_id

        schedules_list.append(temp_schedule)
        temp_schedule = {}
    all_schedules['schedules'] = schedules_list

    return all_schedules


# def get_schedule(gmp,schedule_id):
#     schedule= gmp.get_schedule(schedule_id)
#     tree = ET.fromstring(schedule)
#
#     schedule_name = tree.find('task/name').text
#     task_target_id = tree.find('task/target').attrib['id']
#     task_scanner_id = tree.find('task/scanner').attrib['id']
#     task_config_id = tree.find('task/config').attrib['id']
#     task_comment = tree.find('task/comment').text
#
#     return task_name, task_target_id, task_scanner_id, task_config_id, task_comment


def get_task_status(gmp, task_id):
    task = gmp.get_task(task_id)
    # pretty_print(task)
    tree = ET.fromstring(task)
    task_status = tree.find('task/status').text
    task_progress = tree.find('task/progress').text

    return task_status, task_progress





def fuzzy_logic(gmp, report_id, significance):
    # First install pandas, numpy, skfuzzy packages

    report = gmp.get_report(report_id=report_id, report_format_id='9087b18c-626c-11e3-8892-406186ea4fc5')
    tree = ET.fromstring(report)

    csv_name = tree.find('report/task/name').text
    csv_code = tree.find('report/report_format').tail

    with open(csv_name + '.csv', 'wb') as fout:
        fout.write(base64.b64decode(csv_code))

    ## number of IPS scanned per report normalize number of vulnerabilities

    df = pd.read_csv(csv_name + '.csv')
    no_of_hosts = df.shape[0]
    high = df['High'].sum() / no_of_hosts  # divide with no of hosts
    medium = df['Medium'].sum() / no_of_hosts  # divide with no of hosts
    low = df['Low'].sum() / no_of_hosts  # divide with no of hosts
    insig = significance

    os.remove(csv_name + '.csv')

    low_vulns = ctrl.Antecedent(np.arange(0, 251, 1), 'low_vulns')
    medium_vulns = ctrl.Antecedent(np.arange(0, 251, 1), 'medium_vulns')
    high_vulns = ctrl.Antecedent(np.arange(0, 251, 1), 'high_vulns')
    institute_sign = ctrl.Antecedent(np.arange(0, 11, 1), 'institute_sign')
    ordering_score = ctrl.Consequent(np.arange(0, 101, 1), 'ordering_score')

    ##change maximum range of low medium high

    low_vulns['low'] = fuzz.trimf(low_vulns.universe, [0, 0, 100])
    low_vulns['medium'] = fuzz.trimf(low_vulns.universe, [0, 100, 250])
    low_vulns['high'] = fuzz.trimf(low_vulns.universe, [100, 250, 250])

    medium_vulns['low'] = fuzz.trimf(medium_vulns.universe, [0, 0, 100])
    medium_vulns['medium'] = fuzz.trimf(medium_vulns.universe, [0, 100, 250])
    medium_vulns['high'] = fuzz.trimf(medium_vulns.universe, [100, 250, 250])

    high_vulns['low'] = fuzz.trimf(high_vulns.universe, [0, 0, 1])
    high_vulns['medium'] = fuzz.trimf(high_vulns.universe, [0, 1, 250])
    high_vulns['high'] = fuzz.trimf(high_vulns.universe, [1, 250, 250])

    institute_sign['low'] = fuzz.trimf(institute_sign.universe, [1, 1, 3])
    institute_sign['medium'] = fuzz.trimf(institute_sign.universe, [1, 5, 10])
    institute_sign['high'] = fuzz.trimf(institute_sign.universe, [5, 10, 10])

    ordering_score['very low'] = fuzz.trimf(ordering_score.universe, [0, 0, 20])
    ordering_score['low'] = fuzz.trimf(ordering_score.universe, [20, 30, 40])
    ordering_score['medium'] = fuzz.trimf(ordering_score.universe, [40, 50, 60])
    ordering_score['high'] = fuzz.trimf(ordering_score.universe, [60, 70, 80])
    ordering_score['very high'] = fuzz.trimf(ordering_score.universe, [80, 100, 100])

    # low_vulns.view()
    # medium_vulns.view()
    # high_vulns.view()
    # institute_sign.view()
    # ordering_score.view()

    # Set of rules for the fuzzy control system
    rule1 = ctrl.Rule(low_vulns['low'] & medium_vulns['low'] & high_vulns['low'] & institute_sign['low'],
                      ordering_score['very low'])
    rule2 = ctrl.Rule(low_vulns['medium'] & medium_vulns['low'] & high_vulns['low'] & institute_sign['low'],
                      ordering_score['very low'])
    rule3 = ctrl.Rule(medium_vulns['low'] & high_vulns['medium'] & institute_sign['low'],
                      ordering_score['very low'])
    rule4 = ctrl.Rule(medium_vulns['low'] & high_vulns['high'] & institute_sign['low'],
                      ordering_score['high'])
    rule5 = ctrl.Rule(medium_vulns['low'] & high_vulns['high'] & institute_sign['high'],
                      ordering_score['very high'])
    rule6 = ctrl.Rule(medium_vulns['low'] & high_vulns['medium'] & institute_sign['high'],
                      ordering_score['high'])
    rule7 = ctrl.Rule(medium_vulns['low'] & high_vulns['medium'] & institute_sign['medium'],
                      ordering_score['medium'])
    rule8 = ctrl.Rule(medium_vulns['low'] & high_vulns['medium'] & institute_sign['low'],
                      ordering_score['low'])
    rule9 = ctrl.Rule(medium_vulns['medium'] & high_vulns['low'] & institute_sign['low'],
                      ordering_score['very low'])
    rule10 = ctrl.Rule(medium_vulns['medium'] & high_vulns['medium'] & institute_sign['low'],
                       ordering_score['low'])
    rule11 = ctrl.Rule(medium_vulns['medium'] & high_vulns['high'] & institute_sign['low'],
                       ordering_score['medium'])
    rule12 = ctrl.Rule(medium_vulns['medium'] & high_vulns['high'] & institute_sign['medium'],
                       ordering_score['high'])
    rule13 = ctrl.Rule(medium_vulns['medium'] & high_vulns['high'] & institute_sign['high'],
                       ordering_score['very high'])
    rule14 = ctrl.Rule(medium_vulns['high'] & high_vulns['low'] & institute_sign['low'],
                       ordering_score['low'])
    rule15 = ctrl.Rule(high_vulns['low'] & institute_sign['low'],
                       ordering_score['low'])
    rule16 = ctrl.Rule(high_vulns['medium'] & institute_sign['low'],
                       ordering_score['medium'])
    rule17 = ctrl.Rule(high_vulns['high'] & institute_sign['low'],
                       ordering_score['high'])
    rule18 = ctrl.Rule(high_vulns['high'] & institute_sign['high'],
                       ordering_score['very high'])
    rule30 = ctrl.Rule(high_vulns['low'] & institute_sign['medium'],
                       ordering_score['low'])

    rule19 = ctrl.Rule(low_vulns['low'] & medium_vulns['low'] & high_vulns['low'] & institute_sign['medium'],
                       ordering_score['low'])
    rule20 = ctrl.Rule(low_vulns['low'] & medium_vulns['low'] & high_vulns['low'] & institute_sign['high'],
                       ordering_score['medium'])
    rule21 = ctrl.Rule(low_vulns['low'] & medium_vulns['medium'] & high_vulns['low'] & institute_sign['medium'],
                       ordering_score['low'])
    rule22 = ctrl.Rule(low_vulns['low'] & medium_vulns['medium'] & high_vulns['medium'] & institute_sign['medium'],
                       ordering_score['medium'])
    rule23 = ctrl.Rule(low_vulns['high'] & medium_vulns['low'] & high_vulns['low'] & institute_sign['high'],
                       ordering_score['medium'])
    rule24 = ctrl.Rule(low_vulns['high'] & medium_vulns['high'] & high_vulns['medium'] & institute_sign['high'],
                       ordering_score['high'])
    rule25 = ctrl.Rule(low_vulns['high'] & medium_vulns['high'] & high_vulns['high'] & institute_sign['medium'],
                       ordering_score['high'])
    rule26 = ctrl.Rule(low_vulns['medium'] & medium_vulns['high'] & high_vulns['low'] & institute_sign['medium'],
                       ordering_score['medium'])
    rule27 = ctrl.Rule(low_vulns['medium'] & medium_vulns['low'] & high_vulns['low'] & institute_sign['high'],
                       ordering_score['medium'])
    rule28 = ctrl.Rule(low_vulns['low'] & medium_vulns['medium'] & high_vulns['high'] & institute_sign['high'],
                       ordering_score['very high'])

    rule29 = ctrl.Rule(high_vulns['low'] & institute_sign['high'],
                       ordering_score['medium'])

    scoring_ctrl = ctrl.ControlSystem(
        [rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13, rule14, rule15,
         rule16, rule17, rule18, rule19, rule20, rule21, rule22, rule23, rule24, rule25, rule26, rule27, rule28, rule29,
         rule30])

    scoring = ctrl.ControlSystemSimulation(scoring_ctrl)
    scoring.input['low_vulns'] = low
    scoring.input['medium_vulns'] = medium
    scoring.input['high_vulns'] = high
    scoring.input['institute_sign'] = insig

    scoring.compute()
    output_score = scoring.output['ordering_score']

    # ordering_score.view(sim=scoring)
    # print('Total High = ', high, "\nTotal Medium = ", medium, "\nTotal Low = ", low, "\nSignificance = ", insig)
    # print("\nOrdering score = ", output_score)
    return output_score







############
# MODIFIED #
############
def completeFlow(gmp, request_id, target_name, hosts, significance):
    scanner_id = '08b69003-5fc2-4037-a479-93b440211c73'
    config_id = 'daba56c8-73ec-11df-a475-002264764cea'
    task_name = target_name + "_task"
    target_id = create_target(gmp, hosts, target_name)
    task_id = create_task(gmp, task_name, target_id, scanner_id, config_id)
    start_task(gmp, task_id)
    task_status, task_progress = get_task_status(gmp, task_id)

    while task_status != "Done":
        time.sleep(60)
        task_status, task_progress = get_task_status(gmp, task_id)
    
    report_id=getReportByTask(gmp, task_id)

    ##fuzzy logic ordering score calculation
    report_significance = fuzzy_logic(gmp,report_id, int(significance))

    # REARRANGED CODE
    # add report to db
    #print('Connection established')
    #conn = mysql.connector.connect(
    #    database="csirt_portal",
    #    host="10.10.60.52", 
    #    user="goldman",      
    #    passwd="!G0ldM@nMySQL$!"     
    #    )
    
    #cursor = conn.cursor(buffered=True)
    #sql = "INSERT INTO vulnerabilityanalysisreport (RequestId, Report_Id, Timestamp, ReportSignificance) VALUES(%s, %s, %s, %s)"
    #val = (request_id, report_id, datetime.datetime.now(), heuristic_significance)
    #cursor.execute(sql, val)
    
    #sql = "UPDATE REQUEST SET ISCALLED=1 WHERE ID="+str(request_id)+" AND REPETITIVE=0"
    #cursor.execute(sql)
    #conn.commit()
    #cursor.close()
    #conn.close()
    #print('Connection closed')

if __name__ == "__main__":
    target_name = 'test completeflow'
    target_comment = 'nop'
    task_name = 'eleven task with schedule and id'
    task_comment = 'Some comment'
    scanner_id = '08b69003-5fc2-4037-a479-93b440211c73'
    config_id = 'daba56c8-73ec-11df-a475-002264764cea'
    report_id = 'e26c4e6c-cbbd-42eb-b027-f6e5fd18caba'
    report_format_id = 'c402cc3e-b531-11e1-9163-406186ea4fc5'
    target_id = 'a5ad5fc9-622d-4f04-bfab-ef54fb0fe42a'
    # task_id = '441eabf4-766e-42da-911b-dfdd8e22a6a1'
    schedule_id = '9dc48ddb-5b47-4766-8b06-31023a452730'
    gmp = create_connection()
    hosts = ['127.0.0.1']
    completeFlow(target_name, hosts)
    # hosts.insert(0, "127.0.0.1")
    # target_id = create_target(gmp, hosts, target_name, alive_tests)
    # task_id = create_task(gmp, task_name, target_id, schedule_id, scanner_id, config_id)
    # print(task_id)
    # start_task(gmp,task_id)
    # tasks = get_all_tasks(gmp)
    # print(tasks)
    # delete_task(gmp,'2a5484fd-7fe5-4fd6-ae10-cec681a7023c')
    # all_reports = (get_all_reports(gmp))
    # print(gmp.get_protocol_version())
    # gmp.create_alert()
    # task=gmp.get_task(task_id="441eabf4-766e-42da-911b-dfdd8e22a6a1")
    # pretty_print(task)
    # print(get_task_status(gmp, task_id="9143b869-aa9e-4ec3-a955-c6e6dbba8b05"))
    # get_report_pdf(gmp, report_id, report_format_id)
    # pretty_print(gmp.get_report_formats())
    # pretty_print(report)
    # status, progress = get_task_status(gmp, "07494ed5-b5fe-4045-96d4-9aa2d3c84d28")
    # print(status,progress)
    # print (get_all_targets(gmp))
    # print(get_task(gmp, '0f0589c3-0644-440b-b2b5-09dc0999a135'))
    # createSchedule(gmp, "first schedule from openvas", "a comment", "1", "3")
    # print(getAllSchedules(gmp))
